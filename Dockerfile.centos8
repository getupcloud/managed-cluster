FROM ghcr.io/getupcloud/managed-cluster-base:v1.1.14

ENV \
    DOCTL_VERSION="1.63.1" \
    FLUX_VERSIONS="v0.15.3" \
    GOOGLE_APPLICATION_CREDENTIALS="${CLUSTER_DIR}/service-account.json" \
    HCL2JSON_VERSION="v0.3.3" \
    KIND_VERSION="v0.11.1" \
    KREW_PLUGINS="tree kvaps/node-shell deprecations sniff lineage kurt" \
    KREW_REPOS="kvaps@https://github.com/kvaps/krew-index" \
    KREW_VERSION="v0.4.2" \
    KREW_ROOT="/opt/krew" \
    KUBECONFIG="${CLUSTER_DIR}/.kube/config" \
    KUBECTL_VERSIONS="v1.18.18 v1.19.10 v1.20.6 v1.21.0" \
    OSH="/etc/oh-my-bash" \
    TERRAFORM_VERSION="1.0.9" \
    TF_DATA_DIR="${CLUSTER_DIR}/.terraform" \
    TF_IN_AUTOMATION="true" \
    TF_LOG="INFO" \
    TF_LOG_PROVIDER="INFO" \
    TF_LOG_CORE="WARN" \
    TF_LOG_PATH="${CLUSTER_DIR}/terraform.log" \
    TF_PLAN_FILE="${CLUSTER_DIR}/terraform.tfplan" \
    TF_VARS_FILE="${CLUSTER_DIR}/terraform.tfvars" \
    VELERO_VERSION="1.6.2"

RUN cd /usr/local/bin && \
    curl -skLO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
        unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
        rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
    curl -skL https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64 > yq && \
    KERNEL_MACHINE=$(uname | tr '[:upper:]' '[:lower:]')-$(uname -m | sed -e 's/x86_64/amd64/' -e 's/arm.*$/arm/' -e 's/aarch64/arm64/') && \
    curl -skL https://kind.sigs.k8s.io/dl/v0.11.1/kind-${KERNEL_MACHINE} > kind && \
    curl -skL https://github.com/tmccombs/hcl2json/releases/download/v0.3.3/hcl2json_linux_amd64 > hcl2json && \
    curl -skL https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.3/aws-iam-authenticator_0.5.3_linux_amd64 > \
      aws-iam-authenticator && \
    curl -skL https://github.com/derailed/k9s/releases/download/v0.24.14/k9s_Linux_x86_64.tar.gz | tar xzvf - k9s && \
    curl -skL https://github.com/ahmetb/kubectx/releases/download/v0.9.3/kubectx > kubectx && \
    curl -skL https://github.com/ahmetb/kubectx/releases/download/v0.9.3/kubens > kubens && \
    curl -sKl https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases > /etc/profile.d/kubectl_aliases.sh && \
    curl -skL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash && \
    curl -skL https://run.linkerd.io/install | INSTALLROOT=/usr/local bash && \
    for KUBECTL_VERSION in $KUBECTL_VERSIONS; do \
      curl -skL https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl > \
        kubectl_${KUBECTL_VERSION}; \
    done && \
    ln -s kubectl_$KUBECTL_VERSION kubectl && \
    ln -s ${KUBECONFIG%/*} /root/.kube && \
    for FLUX_VERSION in $FLUX_VERSIONS; do \
        curl -skL https://github.com/fluxcd/flux2/releases/download/${FLUX_VERSION}/flux_${FLUX_VERSION:1}_linux_amd64.tar.gz \
            | tar xzv --transform="s,.*,flux-$FLUX_VERSION,"; \
    done && \
    ln -s flux-$FLUX_VERSION flux && \
    curl -skL https://github.com/digitalocean/doctl/releases/download/v$DOCTL_VERSION/doctl-$DOCTL_VERSION-linux-amd64.tar.gz \
        | tar xzv doctl && \
    curl -skL https://github.com/vmware-tanzu/velero/releases/download/v${VELERO_VERSION}/velero-v${VELERO_VERSION}-linux-amd64.tar.gz \
        | tar xzv --strip-components=1 velero-v${VELERO_VERSION}-linux-amd64/velero && \
    curl -Lv https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux > sops && \
    \
    curl -skL https://raw.github.com/ohmybash/oh-my-bash/master/tools/install.sh > oh-my-bash.install && \
        chmod +x oh-my-bash.install && \
        echo "Execute 'oh-my-bash.install' to install OH-MY-BASH" && \
    chmod -R +x /usr/local/bin

RUN KERNEL_MACHINE=$(uname | tr '[:upper:]' '[:lower:]')_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/arm.*$/arm/' -e 's/aarch64/arm64/') && \
    curl -skL  https://github.com/kubernetes-sigs/krew/releases/download/${KREW_VERSION}/krew-${KERNEL_MACHINE}.tar.gz \
        | tar xzv ./krew-${KERNEL_MACHINE} && \
    mv krew-${KERNEL_MACHINE} /usr/local/bin/krew && \
    krew install krew && \
    ln -s /usr/local/bin/krew /usr/local/bin/kubectl-krew && \
    for repo in ${KREW_REPOS}; do \
        kubectl krew index add ${repo%%@*} ${repo##*@}; \
    done && \
    for plugin in ${KREW_PLUGINS}; do \
        kubectl krew install $plugin; \
    done && \
    chmod -R 777 $KREW_ROOT

RUN cd /etc/profile.d && \
    curl -skL https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh > bash_ps1_kubernetes.sh && \
    chmod +x bash_ps1_kubernetes.sh && \
    curl -skL https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh > bash_ps1_git.sh && \
    chmod +x bash_ps1_git.sh

COPY root/ /
COPY root/etc/skel/ /root/
COPY Dockerfile.* /

ARG GIT_COMMIT
ARG VERSION
ARG RELEASE

RUN echo $VERSION > /.version && \
    echo $RELEASE > /.release && \
    echo $GIT_COMMIT > /.gitcommit && \
    rsync /etc/skel/ /root/ && \
    chmod -R +x /etc/profile.d/ && \
    chmod 777 /usr/share

WORKDIR $CLUSTER_DIR

ENTRYPOINT ["/usr/local/bin/entrypoint"]
