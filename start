#!/bin/bash

export ROOTDIR=$(dirname $(realpath $0))
source ${ROOTDIR}/root/etc/profile.d/getup.sh

select_cluster()
{
    if [ $# -eq 0 ]; then
        local clusters=( clusters/*/*/ )
    else
        clusters=( $@ )
    fi

    clusters=( ${clusters[*]%/} )

    if [ ${#clusters[*]} -le 1 ]; then
        config_file=$clusters/cluster.conf
        if ! has_valid_config $config_file; then
            warn Config not found: $config_file
            return 1
        fi

        echo -n ${clusters}
        return
    fi

    cluster_names=( ${clusters[*]#*/} )
    cluster_names=( ${cluster_names[*]%/*} )
    cluster_types=( ${clusters[*]##*/} )

    if type dialog &>/dev/null; then
        exec 3>.tmp
        eval dialog --output-fd 3 --menu "'Select cluster'" 0 0 0 \
            "$(for i in $(seq 0 $(( ${#clusters[*]} - 1 )) ); do echo -n " $i '[${cluster_types[$i]}] ${cluster_names[$i]}'"; done)" \
            '---' '---' \
            b "'Bootstrap cluster'"  >&2
            #s 'Sync from template' >&2
        idx=$(<.tmp)
        rm -f .tmp
        case "$idx" in
            [0-9]*)
                cluster_dir=${clusters[$idx]}
            ;;
            *) cluster_dir=$idx
        esac
    else
        local PS3="${COLOR_GREEN}${COLOR_BOLD}Select cluster to start: ${COLOR_RESET} "

        select cluster_dir in ${clusters[*]}; do
            config_file=$cluster_dir/cluster.conf
            if has_valid_config $cluster_dir; then
                break
            else
                warn Config not found: $config_file
            fi
        done
    fi

    echo $cluster_dir
}

start_container()
{
    if [ $# -lt 1 ]; then
        warn Missing arg: cluster-dir
        return 1
    fi

    local cluster_dir=$1
    shift
    local docker_run_options="$@"

    if $set_remote_upstream; then
        info Adding remote: upstream ${upstream_git_repo:-git@github.com:getupcloud/managed-cluster.git}
        git remote add upstream ${upstream_git_repo:-git@github.com:getupcloud/managed-cluster.git}
        git remote set-url --push upstream FORBIDEN
    fi

    if ! $run_as_user; then
        : ${CONTAINER_USER:=root}
        : ${CONTAINER_GROUP:=root}
        : ${CONTAINER_USER_ID:=0}
        : ${CONTAINER_GROUP_ID:=0}
        : ${CONTAINER_HOME:=/root}
    else
        : ${CONTAINER_USER:=$(id -un)}
        : ${CONTAINER_GROUP:=$(id -gn)}
        : ${CONTAINER_USER_ID:=$(id -u)}
        : ${CONTAINER_GROUP_ID:=$(id -g)}
        : ${CONTAINER_HOME:=/home/$CONTAINER_USER}
    fi

    docker_image_repo=${docker_image_repo:-getupcloud/cluster}
    docker_image_tag=${docker_image_tag:-$(cat version.txt)}
    docker_image=${docker_image_repo}:${docker_image_tag}
    docker_run_options_defaults=(
        --cap-add=SYS_PTRACE
        #--userns host
        --network host
        #--user $CONTAINER_USER_ID:$CONTAINER_GROUP_ID
        --rm
        -it
        --env HOME=${CONTAINER_HOME}
        --env-file $ROOTDIR/.dockerenv
        -v $cluster_dir:/cluster
        -v $ROOTDIR:/repo
        -v $HOME:/home/_host:ro
    )

    if [ "$type" == kind ]; then
        docker_run_options_defaults+=(
            -v /var/run/docker.sock:/var/run/docker.sock
        )
    fi

    if $devel; then
        docker_run_options_defaults+=(
            --env DEVEL=true
        )
    fi

    {
        echo CONTAINER_USER=$CONTAINER_USER
        echo CONTAINER_GROUP=$CONTAINER_GROUP
        echo CONTAINER_USER_ID=$CONTAINER_USER_ID
        echo CONTAINER_GROUP_ID=$CONTAINER_GROUP_ID
        echo CONTAINER_HOME=$CONTAINER_HOME
        echo GH_TOKEN=$GH_TOKEN
    } > .dockerenv

    if $force_docker_image_build; then
        make
    else
        if docker inspect ${docker_image_repo}:${docker_image_tag} &>/dev/null; then
            local dockerfile_modified_ts=$(stat --format %Y Dockerfile)
            local image_created=$(docker inspect ${docker_image_repo}:${docker_image_tag} | jq -r '.[].Created')
            local image_created_ts=$(date --date="$image_created" +%s)

            if (( dockerfile_modified_ts > image_created_ts )); then
                if ask "Docker image ${docker_image_repo}:${docker_image_tag} is outdated. Build now? [Y/n]"; then
                    make
                fi
            fi
        fi
    fi

    info Starting cluster: $cluster_dir with docker image ${docker_image}
    docker_run="docker run ${docker_run_options_defaults[@]} ${docker_run_options} ${docker_image_repo}:${docker_image_tag} ${docker_command}"
    info \$ $docker_run
    echo
    eval sudo $docker_run
}

devel=false
standalone=false
cluster_dir=""
docker_run_options=()
port_range=32000-32010
run_as_user=true
set_remote_upstream=false
force_docker_image_build=false

function usage()
{
    echo "Usage: $1 [options...] cluster_dir [-- command...] "
    echo "Options:"
    echo "  -s, --standalone                      Start from standalone dir ./standalone"
    echo "  -d, --devel                           Mount ./ into container's /host, prepending it into PATH"
    echo "  -p, --port host_port:container_port   "
    echo "  -P, --port-range $port_range"
    echo "  -r, --run-as-root"
    echo "  -u, --set-remote-upstream             Add git upstream \${upstream_git_repo} (pull-only)' on start"
    echo "  -b, --force-docker-image-build        Force building local docker image"
}

while [ $# -gt 0 ]; do
    case $1 in
        --help|-h)
            usage $0
            exit 0
        ;;
        -s|--standalone)
            standalone=true
        ;;
        -d|--devel)
            devel=true
        ;;
        -P|--port-range)
            shift
            port_range=$1
        ;;
        -p|--port)
            shift
            if ! [[ "$1" =~ [0-9]+:[0-9]+ ]]; then
                docker_run_options+=( -p $1:$1 )
            else
                docker_run_options+=( -p $1 )
            fi
        ;;
        -r|--run-as-root)
            run_as_user=false
        ;;
        -u|--set-remote-upstream)
            set_remote_upstream=true
        ;;
        -b|--force-docker-image-build)
            force_docker_image_build=true
        ;;
        --) shift
            break
        ;;
        ^-)
            warn Invalid option: $1
            exit 1
        ;;
        *)
            if [ -z "$cluster_dir" ]; then
                cluster_dir=$1
            else
                warn Invalid parameter: $1
                exit 1
            fi
    esac
    shift
done
#docker_run_options+=( -p $port_range:$port_range )

docker_command="${*:-/bin/bash}"
shift $#

if $standalone; then
    cluster_dir="$PWD/standalone"
    mkdir -p $cluster_dir
    touch $cluster_dir/cluster.conf
    touch $cluster_dir/terraform.tfvars
    #if ! [ -e $cluster_dir/cluster.conf ]; then
    #    (
    #        customer=standalone
    #        type=standalone
    #        name=standalone
    #    ) > $cluster_dir/cluster.conf
    #fi
    start_container $cluster_dir ${docker_run_options[@]}
    exit
fi

cluster_dir=$(select_cluster ${cluster_dir})

if [ -z "$cluster_dir" ] || ! [ -d "$cluster_dir" ]; then
    warn Cluster invalid or dir not found.
    warn Please run \`./bootstrap\` to create or specifiy one from \`clusters/XXX/XXX\`
    exit 1
fi

cluster_dir=$(realpath ${cluster_dir})
config_file=${cluster_dir}/cluster.conf
source_env $config_file
start_container $cluster_dir ${docker_run_options[@]}
