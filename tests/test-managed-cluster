#!/bin/bash

type=generic
CLUSTER_DIR=$PWD/clusters/$NAME/$type

testing "Can create cluster"
run "./managed-cluster create -c $CUSTOMER -n $NAME -t $type -k ecdsa"
assert "grep -q customer=$CUSTOMER $CLUSTER_DIR/cluster.conf"
assert "grep -q name=$NAME $CLUSTER_DIR/cluster.conf"
assert "grep -q type=$type $CLUSTER_DIR/cluster.conf"
[ "$remote" == local ] || assert "grep -q upstream_git_repo=$remote $CLUSTER_DIR/cluster.conf"
assert "grep -q origin_git_repo=git@github.com:getupcloud/managed-cluster-$CUSTOMER.git $CLUSTER_DIR/cluster.conf"
assert "grep -q https_origin_git_repo=https://github.com/getupcloud/managed-cluster-$CUSTOMER.git $CLUSTER_DIR/cluster.conf"
assert "grep -q flux_git_repo=ssh://git@github.com/getupcloud/managed-cluster-$CUSTOMER.git $CLUSTER_DIR/cluster.conf"
assert "[ \$(wc -l $CLUSTER_DIR/identity | cut -f1 -d' ') -eq 12 ]"
assert "[ \$(cut -f1 -d' ' $CLUSTER_DIR/identity.pub) == ecdsa-sha2-nistp521 ]"

testing "Can set remote upstream"
run "./managed-cluster -v set-upstream $CLUSTER_DIR"
assert "[ \$(git remote get-url upstream --all) == 'git@github.com:getupcloud/managed-cluster.git' ]"
assert "[ \$(git remote get-url upstream --push) == FORBIDEN ]"

testing "Forbid update already existing upstream remote"
run "./managed-cluster -v set-upstream -r git@github.com:getupcloud/somewhere-over-the-rainbown.git $CLUSTER_DIR"
assert "[ \$(git remote get-url upstream --all) != git@github.com:getupcloud/somewhere-over-the-rainbown.git ]"

testing "Can replace existing upstream remote"
run "./managed-cluster -v set-upstream -f -r git@github.com:getupcloud/somewhere-over-the-rainbown.git $CLUSTER_DIR"
assert "[ \$(git remote get-url upstream --all) == 'git@github.com:getupcloud/somewhere-over-the-rainbown.git'  ]"
assert "[ \$(git remote get-url upstream --push) == FORBIDEN ]"
git remote remove upstream

testing "Can create cluster with non-default key size"
rm -f $CLUSTER_DIR/identity
run "./managed-cluster -v create -c $CUSTOMER -n $NAME -t $type -k ecdsa -l 256 -f"
assert "[ \$(wc -l $CLUSTER_DIR/identity | cut -f1 -d' ') -eq 9 ]"
assert "[ \$(cut -f1 -d' ' $CLUSTER_DIR/identity.pub) == ecdsa-sha2-nistp256 ]"

testing "Can start and execute container"
run ./managed-cluster start -f $CLUSTER_DIR -- id -u | tail -n1 | tr -d '\r' > out.txt
assert "[ '$(cat out.txt)' -eq '$UID' ]"

testing "Can sync templates"
cp templates/$type/variables.tf templates/$type/variables.tf.test
grep -q 'TESTING LINE' templates/$type/variables.tf || echo -e "\n# TESTING LINE #$$" >> templates/$type/variables.tf
run "./managed-cluster -v sync-templates -f $CLUSTER_DIR"
assert "grep -q '# TESTING LINE #$$' $CLUSTER_DIR/variables.tf"
mv templates/$type/variables.tf.test templates/$type/variables.tf

testing "Can update ssh key"
run "./managed-cluster -v update-ssh-key -k rsa -l 2048 -f $CLUSTER_DIR"
assert "[ \$(wc -l $CLUSTER_DIR/identity | cut -f1 -d' ') -eq 27 ]"
assert "[ \$(cut -f1 -d' ' $CLUSTER_DIR/identity.pub) == ssh-rsa ]"
