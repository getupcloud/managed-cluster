#!/bin/bash

${DEBUG:-false} && set -x

ROOTDIR=$(dirname $0)
source $ROOTDIR/root/etc/profile.d/getup.sh
export PATH="$PATH:$PWD/root/usr/local/bin/"

if [ -t 0 ]; then
    COLOR_RED="$(tput setaf 1)"
    COLOR_GREEN="$(tput setaf 2)"
    COLOR_YELLOW="$(tput setaf 3)"
    COLOR_BOLD="$(tput bold)"
    COLOR_RESET="$(tput sgr0)"
fi

copy_from_template()
{
    if [ $# -lt 2 ]; then
      warn "Invalid or missing parameters: $0 [src-dir] [dest-dir] [rsync-params]"
      return 1
    fi

    local src=$1
    local dest=$2
    shift 2
    local rsync_params="$@"

    if ! [ -d "$src" ]; then
      warn "Source dir not found: $src"
      return 1
    fi

    if ! [ -d "$dest" ]; then
      mkdir -p "$dest"
    fi

    rsync -va $rsync_params $src/ templates/manifests templates/*.* "$dest"
}

sync_from_template()
{
    if [ $# -ne 1 ]; then
      warn "Invalid or missing parameters: $0 [cluster-dir]"
      return 1
    fi

    local dest=$1

    if ! [ -d "$dest" ]; then
      warn "Cluster dir not found: $dest"
      return 1
    fi

    if ! [ -e "$dest/cluster.conf" ]; then
      warn "Missing $dest/cluster.conf"
      return 1
    fi

    source $dest/cluster.conf || return 1

    if [ -z "$customer" ] || [ -z "$name" ] || [ -z "$type" ]; then
      warn "Invalid cluster.conf: customer=$customer name=$name type=$type"
      return 1
    fi

    local src=templates/$type

    if ! [ -d "$src" ]; then
      warn "Template dir not found: $src"
      return 1
    fi

    if ! ask "Copy from $src to $dest? [Y/n]"; then
      return 0
    fi

    copy_from_template $src $dest --exclude=manifests/cluster/ --exclude=manifests/base/kustomization.yaml --exclude=\*.swp
}

require_config()
{
    local _name="${1}"
    local _description="$2"

    # use value if already exists
    if [ -n "${!_name}" ]; then
        set_config ${_name}="${!_name}" "$_description"
        return 0
    fi

    until read_config "$@"; do
        warn "Value can't be empty"
    done

    local _value="${!_name}"
    if grep -q "\s" <<<$_value; then
        set_config "$_name='$_value'" "$_description"
    else
        set_config "$_name=$_value" "$_description"
    fi
}

select_cluster_type()
{
    # use value if already exists
    if [ -n "$type" ]; then
        set_config type=$type "Cluster type. One of dir names from ./templates/"
        return 0
    fi

    local types=( templates/*/ )
    types=( ${types[@]#*/} )
    types=( ${types[@]%/} )
    types=( "${types[@]/manifests}" ) ## remove manifests from types

    local PS3=$(prompt "Select cluster type")

    select type in ${types[@]}; do
        break;
    done

    export template=templates/$type
    set_config type=$type "Cluster type. One of dir names from ./templates/"
}

generate_ssh_keys()
{
    if ! [ -e $cluster_dir/identity ]; then
        info Generating $cluster_dir/identity
        ssh-keygen -t $ssh_key_type -b $ssh_key_length -f $cluster_dir/identity -N "" -C "$customer/$name/$type"
        ssh-keygen -yf $cluster_dir/identity > $cluster_dir/identity.pub
    else
        info Using existing $cluster_dir/identity
    fi

    info Generating $cluster_dir/known_hosts
    ssh-keyscan github.com > $cluster_dir/known_hosts
}

update_ssh_keys()
{
    if ! ask "Generate new ssh keys now? [Y/n]"; then
        return
    fi

    if [ -e $cluster_dir/identity ]; then
        local bkp=$cluster_dir/identity.bkp$(date +%s)
        info Renaming existing ssh key to $bkp
        mv $cluster_dir/identity $bkp
    fi

    generate_ssh_keys
}

###########
## Start ##
###########
usage()
{
    echo "Usage:"
    echo "  $0 [--customer NAME] [--name NAME] [--type NAME] [--ssh-key-type=$ssh_key_type]"
    echo "  $0 [--sync-template|-s] CLUSTER-IDR"
    echo "  $0 [--update-ssh-keys|-u] CLUSTER-DIR"
}

update_ssh_keys=false
ssh_key_type=ecdsa
ssh_key_length=521
force=false

while [ $# -gt 0 ]; do
    case $1 in
        --help|-h)
            usage
            exit 0
        ;;
        -f|--force)
            force=true
            shift
        ;;
        --sync-template|-s)
            if [ $# -lt 2 ]; then
                usage
                exit 1
            fi
            sync_from_template $2
            exit
        ;;
        --customer)
            shift
            customer=$1
        ;;
        --name)
            shift
            name=$1
        ;;
        --type)
            shift
            type=$1
        ;;
        --ssh-key-type)
            shift
            ssh_key_type=$1
            case $ssh_key_type in
                ecdsa) ssh_key_length=521 ;;
                dsa|rsa) ssh_key_length=2048
            esac
        ;;
        --update-ssh-keys|-u)
            if [ $# -lt 2 ]; then
                usage
                exit 1
            fi
            update_ssh_keys $2
            exit
        ;;
        *)
            usage
            exit 1
    esac
    shift
done

config_file=${1:-$ROOTDIR/.cluster.conf}

if [ -e $config_file ]; then
    debug Reading config from temporary file: $config_file
    source $config_file
else
    echo Creating temporary config: $config_file
    touch $config_file
fi

set -e

require_config customer "Customer name"
require_config name "Cluster name"
select_cluster_type

GIT_VERSION=$(git version | awk '{print $NF}')
case $GIT_VERSION in
    1.*)
        set_config upstream_git_repo=$(git remote -v | grep -m1 ^origin|awk '{print $2}') "Upstream SSH git repo"
        ;;
    2.*)
        set_config upstream_git_repo=$(git remote get-url origin) "Upstream SSH git repo"
esac

_origin_git_repo=$(git-url $upstream_git_repo url2ssh)
set_config origin_git_repo=${_origin_git_repo%.git}-$customer.git "Origin SSH git repo"
set_config https_origin_git_repo=$(git-url $origin_git_repo url2https) "Origin HTTPS git repo"

_git_repo=${origin_git_repo#git://}
_git_repo=ssh://${origin_git_repo/:/\/}
set_config flux_git_repo=${_git_repo} "Git repo for default flux GitRepository"

cluster_root_dir=clusters/$name
cluster_dir=$cluster_root_dir/$type

if [ -d $cluster_dir ] && ! $force; then
    warn "Cluster already exists: $cluster_dir"
    exit 1
fi

mkdir -p ${cluster_root_dir}
copy_from_template templates/$type $cluster_dir

info Moving $config_file to $cluster_dir/cluster.conf
mv $config_file $cluster_dir/cluster.conf

generate_ssh_keys
