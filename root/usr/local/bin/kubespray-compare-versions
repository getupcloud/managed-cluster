#!/bin/bash

set -eo pipefail

# Configura√ß√µes
REPO_URL="https://github.com/kubernetes-sigs/kubespray.git"
TMP_DIR=$(mktemp -d)
OUTPUT_DIR="$PWD/kubespray_analysis"
KUBE_VERSIONS_FILE="$OUTPUT_DIR/kubespray_supported_kubernetes_versions.txt"
COMPARE_DIR="inventory/sample/group_vars"

# Valida√ß√£o dos par√¢metros
if [ "$#" -lt 1 ]; then
    echo "Uso: $0 <vers√£o-inicial> [vers√£o-final]"
    echo "Exemplo 1: $0 v2.22       # Analisa da v2.22.0 at√© a √∫ltima vers√£o"
    echo "Exemplo 2: $0 v2.22.1     # Formato completo tamb√©m funciona"
    echo "Exemplo 3: $0 v2.22 v2.24 # Intervalo espec√≠fico"
    exit 1
fi

VERSION_START="$1"
VERSION_END="$2"

# Pr√©-requisitos
mkdir -p "$OUTPUT_DIR"
echo "‚ñ∂ Diret√≥rio de sa√≠da: $OUTPUT_DIR"
echo "üìã Vers√µes do Kubernetes ser√£o salvas em: $KUBE_VERSIONS_FILE"

# Clone
echo "‚è¨ Clonando reposit√≥rio..."
git clone --quiet "$REPO_URL" "$TMP_DIR"
cd "$TMP_DIR"

# Normaliza vers√µes (adiciona .0 se necess√°rio)
normalize_version() {
    local version=$1
    if [[ "$version" =~ ^v[0-9]+\.[0-9]+$ ]]; then
        echo "${version}.0"
    else
        echo "$version"
    fi
}

NORMALIZED_START=$(normalize_version "$VERSION_START")
NORMALIZED_END=$(normalize_version "$VERSION_END")

# Encontra arquivos que cont√™m kubelet_checksums
find_kubelet_checksums_files() {
    local tag=$1
    git ls-tree -r "$tag" --name-only roles | \
        grep -E 'roles/.*/defaults/(.*/|)(main|checksums)\.ya?ml$' | \
        while read file; do
            if git show "$tag:$file" | grep -q 'kubelet_checksums:'; then
                echo "$file"
            fi
        done
}

# Extrai vers√µes do Kubernetes dos checksums
extract_kube_versions() {
    local tag=$1
    local checksum_files=$(find_kubelet_checksums_files "$tag")

    echo "  Vers√µes suportadas:" >> "$KUBE_VERSIONS_FILE"

    for file in $checksum_files; do
        echo "    Arquivo: $file" >> "$KUBE_VERSIONS_FILE"
        git show "$tag:$file" | \
            awk '/^kubelet_checksums:/ {flag=1; next} /^[^ ]/ {flag=0} flag' | \
            tr -d ' ' | \
            grep -E 'v[0-9]+\.[0-9]+\.[0-9]+' | \
            awk -F: '{print "      - " $1}' | \
            sort -V | \
            uniq >> "$KUBE_VERSIONS_FILE"
    done
}

# Obt√©m todas as vers√µes est√°veis (√∫ltimo patch de cada X.Y)
ALL_VERSIONS=($(
    git tag -l "v*" |
    grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' |
    sort -V |
    awk -F. '{
        key = $1"."$2;
        if (versions[key]) {
            if ($3 > versions[key]) {
                versions[key] = $3
                full_versions[key] = $0
            }
        } else {
            versions[key] = $3
            full_versions[key] = $0
        }
    } END {
        for (key in full_versions) {
            print full_versions[key]
        }
    }' |
    sort -V
))

# Filtra vers√µes dentro do intervalo solicitado
FILTERED_VERSIONS=()
START_FOUND=0
END_FOUND=0

for version in "${ALL_VERSIONS[@]}"; do
    # Encontra o ponto de in√≠cio
    if [ "$version" == "$NORMALIZED_START" ] || [[ "$version" =~ ^"$VERSION_START"\. ]]; then
        START_FOUND=1
    fi

    # Adiciona vers√µes ap√≥s o in√≠cio
    if [ $START_FOUND -eq 1 ]; then
        FILTERED_VERSIONS+=("$version")
    fi

    # Verifica se atingiu o final (se especificado)
    if [ -n "$VERSION_END" ] && 
       ([ "$version" == "$NORMALIZED_END" ] || [[ "$version" =~ ^"$VERSION_END"\. ]]); then
        END_FOUND=1
        break
    fi
done

# Verifica se encontrou as vers√µes solicitadas
if [ $START_FOUND -eq 0 ]; then
    echo "‚ùå Vers√£o inicial $VERSION_START n√£o encontrada"
    echo "   Vers√µes dispon√≠veis:"
    printf "   - %s\n" "${ALL_VERSIONS[@]}"
    exit 1
fi

if [ -n "$VERSION_END" ] && [ $END_FOUND -eq 0 ]; then
    echo "‚ö†Ô∏è Aviso: Vers√£o final $VERSION_END n√£o encontrada, usando at√© a √∫ltima vers√£o dispon√≠vel"
fi

if [ ${#FILTERED_VERSIONS[@]} -lt 1 ]; then
    echo "‚ùå Nenhuma vers√£o encontrada no intervalo especificado"
    exit 1
fi

# Gera arquivo com as vers√µes do Kubernetes
echo "üìä Vers√µes do Kubernetes suportadas por vers√£o do Kubespray:" > "$KUBE_VERSIONS_FILE"

for version in "${FILTERED_VERSIONS[@]}"; do
    echo -e "\nVersion: $version" >> "$KUBE_VERSIONS_FILE"

    # Extrai vers√µes do Kubernetes
    extract_kube_versions "$version"

    # Adiciona outras informa√ß√µes relevantes
    echo "  Componentes:" >> "$KUBE_VERSIONS_FILE"
    git ls-tree -r "$version" --name-only roles | \
        grep -E '/(defaults|vars)/.*\.ya?ml$' | \
        while read file; do
            git show "$version:$file" | \
              grep -E '^(calico|cilium|containerd|coredns|cri|crio|docker|etcd|flannel|helm|kube|kube_vip|metallb|metrics_server|runc)_version:' | \
              sed 's/^/    /' >> "$KUBE_VERSIONS_FILE" || true
        done

#    git show "$version:roles/" 2>/dev/null | \
#        grep -E '^(kube_version|docker_version|containerd_version|calico_version|cilium_version):' | \
#        sed 's/^/    /' >> "$KUBE_VERSIONS_FILE" || true
done

# Compara√ß√£o entre vers√µes consecutivas
if [ ${#FILTERED_VERSIONS[@]} -gt 1 ]; then
    echo -e "\nüîç Comparando altera√ß√µes em $COMPARE_DIR entre vers√µes consecutivas:"
    for ((i=0; i<${#FILTERED_VERSIONS[@]}-1; i++)); do
        CURRENT="${FILTERED_VERSIONS[$i]}"
        NEXT="${FILTERED_VERSIONS[$i+1]}"
        PATCH_FILE="$OUTPUT_DIR/kubespray-compare-${CURRENT}_${NEXT}.patch"

        echo "  Comparando $CURRENT ‚Üí $NEXT..."

        git diff --unified=5 --patch \
            "$CURRENT" "$NEXT" -- \
            "$COMPARE_DIR" \
            > "$PATCH_FILE" || true

        if [ ! -s "$PATCH_FILE" ]; then
            echo "    ‚úÖ Sem altera√ß√µes (arquivo removido)"
            rm -f "$PATCH_FILE"
        else
            echo "    üíæ Diferen√ßas salvas em: $(basename "$PATCH_FILE")"
        fi
    done
else
    echo "‚ÑπÔ∏è Apenas uma vers√£o encontrada, nenhuma compara√ß√£o poss√≠vel"
fi

# Finaliza√ß√£o
echo -e "\n‚úî Conclu√≠do! Resultados em:"
echo "  - An√°lise de vers√µes: $KUBE_VERSIONS_FILE"
if [ ${#FILTERED_VERSIONS[@]} -gt 1 ]; then
    echo "  - Compara√ß√µes entre vers√µes: $OUTPUT_DIR/kubespray-compare-*.patch"
fi
cd - >/dev/null
rm -rf "$TMP_DIR"
