#!/bin/bash

source /etc/profile.d/getup.sh

force=false
generate_all_empty=false

while [ $# -gt 0 ]; do
  case $1 in
    -f|--force)
        force=true
    ;;
    -G|--generate-all-empty)
        generate_all_empty=true
    ;;
    --)
        shift
        break
  esac
  shift
done

for var; do
    export "TF_VAR_${var@E}"
done

if $generate_all_empty; then
    note Generating all non-default values as empty strings
fi

if [ -r "$TF_VARS_FILE" ]; then
  if ! $force; then
    warn $TF_VARS_FILE alreadyt exists. Run with \`-f\` to overwrite.
    exit 1
  fi

  info $TF_VARS_FILE alreadyt exists. Overwriting with existing values.
fi

tfvars_data=""
if [ -r "$TF_VARS_FILE" ]; then
  tfvars_data=$(hcl2json "${TF_VARS_FILE}")
fi

declare -r tfvars_data

variables_files=( $(echo $CLUSTERDIR/variables*.tf | sort -ur) )

#
# check if all variables are correctly defined
#
for variables_file in ${variables_files[@]}; do
  debug "Verifing ${variables_file}... "
  variables_file_data=$(hcl2json $variables_file)
  variables=( $(jq -r '.variable|keys|.[]' <<<$variables_file_data | sort) )

  for variable in ${variables[*]}; do
    variable_description=$(jq -r ".variable.${variable}[0].description" <<<$variables_file_data)
    if [ "$variable_description" == null ]; then
      warn $variables_file: variable is missing description: $variable
      exit 1
    fi

    variable_type=$(jq -r ".variable.${variable}[0].type" <<<$variables_file_data)
    if [ "$variable_type" == null ]; then
      warn $variables_file: variable is missing type: $variable
      exit 1
    fi
  done
  debug 'done'
done

temp_file=$(mktemp -u)
debug "Creating temporary file: $temp_file"
exec 3>$temp_file

export HISTFILE=$CLUSTERDIR/.setup_history
history -r

#
# ask values for non-default variables
#
for variables_file in ${variables_files[@]}; do
    debug Processing ${variables_file}
    variables_file_data=$(hcl2json $variables_file)
    variables=( $(jq -r '.variable|keys|.[]' <<<$variables_file_data | sort) )

    for variable in ${variables[*]}; do
        variable_description=$(jq -r ".variable.${variable}[0].description" <<<$variables_file_data)
        variable_type=$(jq -r ".variable.${variable}[0].type" <<<$variables_file_data)

        # look for `value`. try various defaults, if nothing is found, ask user for input
        # Precedency is: variables.tf:default -> terraform.tfvars -> $TF_VAR_${name} -> $name
        unset value

        # try default from $CLUSTERDIR/variables*.tf file
        variable_default=$(jq -r ".variable.${variable}[0].default // empty" <<<$variables_file_data)
        if [ -z "$variable_default" ]; then
          value="$variable_default"
        fi

        # try $CLUSTERDIR/terraform.tfvars
        tfvar_value=$(jq -r ".$variable" <<<$tfvars_data)
        if [ -n "$tfvar_value" ]; then
          value="$tfvar_value"
        fi

        # try $TF_VAR_${name}
        tf_var_name=TF_VAR_$variable
        if [ -v "$tf_var_name" ]; then
            value="${!tf_var_name}"
        fi

        # try ${name}
        if [ -v "$variable" ]; then
            value="${!variable}"
        fi

        if [ -v value ]; then
            debug "Using existing config $variable=${value}"
        else
            value=""
            if ! $generate_all_empty; then
                while [ -z "$value" ]; do
                    prompt=$(
                        echo -n " Description: $variable_description\n" &&
                        echo -n "        Type: $variable_type\n" &&
                        echo -n "    Variable: $variable>"
                    )

                    read -e -p "$(prompt "$prompt")" value
                    history -s "$value"

                    if [ -z "$value" ]; then
                        warn "Variable can't be empty: $variable"
                    fi
                done
            fi
        fi

        {
            # handle multi-line values
            echo "$variable_description" | sed -e 's/^/# /'
            echo "type: $variable_type" | sed -e 's/^/# /'

            # protect string values
            case "$variable_type" in
                string|\${string})
                    variable_line="$variable = \"$value\""
                ;;
                *)
                    variable_line="$variable = $value"
                ;;
            esac

            if [ "$value" == "$variable_default" ]; then
                # suppress if value is the same as default
                echo "$variable_line" | sed -e 's/^/# /'
            else
                echo "$variable_line"
            fi

            echo
        } >&3
    done

    echo
done

#info "Git repository is:  $git_repo"
#{
#    echo "# Auto generated by $0"
#    echo "git_repo = \"$git_repo\""
#} >&3

history -w

# Save backup and overwrite terraform.tfvars
if [ -r "$TF_VARS_FILE" ]; then
  tf_vars_file_bkp=$TF_VARS_FILE.$(date +%Y%m%d%H%M%S).bkp
  debug Saving backup: $tf_vars_file_bkp
  mv $TF_VARS_FILE $tf_vars_file_bkp
fi

debug Generating new variables file: $TF_VARS_FILE
mv "$temp_file" "$TF_VARS_FILE"

echo
info Execute command below to apply:
info ' $ terraform-apply'
