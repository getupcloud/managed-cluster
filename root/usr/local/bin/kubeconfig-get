#!/usr/bin/env bash

set -e

source /etc/profile.d/getup.sh

if [ -v KUBECONFIG ]; then
    debug Using KUBECONFIG=$KUBECONFIG
fi

if [ $# -gt 0 ]; then
    type=$1
    name=${2:-$name}
fi

info Retrieving kubeconfig for $name/$type

case $type in
    kind)
        exec kind export kubeconfig --name $name "$@"
    ;;

    eks)
        exec aws eks update-kubeconfig --name $name "$@"
    ;;

    doks)
        if ! [ -e ~/.config/doctl/config.yaml ]; then
            doctl auth init
        fi
        exec doctl kubernetes cluster kubeconfig save ${name}
    ;;

    gke)
        if [ -e "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
            read_config GCP_PROJECT "GCP Project"
            gcloud config set project $GCP_PROJECT
            read_config GCE_ZONE "GCE Zone"
            gcloud container clusters get-credentials --zone $GCE_ZONE --project $GCP_PROJECT $name
        else 
            read_config GCP_PROJECT "GCP Project"
            gcloud config set project $GCP_PROJECT

            read_config GCE_ZONE "GCE Zone"
            gcloud container clusters get-credentials --zone $GCE_ZONE --project $GCP_PROJECT $name
        fi
    ;;

    oke)
        if ! [ -e "$OCI_CLI_CONFIG_FILE" ]; then
            read_config OCI_CLI_REGION "OCI Region"
            oci setup config --region $OCI_CLI_REGION --config-file $OCI_CLI_CONFIG_FILE --cli-rc-file $OCI_CLI_RC_FILE

            [ -e $OCI_CLI_CONFIG_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_CONFIG_FILE || true
            [ -e $OCI_CLI_RC_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_RC_FILE || true
            [ -e $OCI_CLI_KEY_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_KEY_FILE || true
        fi

        while true; do
            unset OCI_COMPARTMENT_NAME
            read_config OCI_COMPARTMENT_NAME "Compartment Name [type ? to list]"
            if [ "$OCI_COMPARTMENT_NAME" != "?" ]; then
                break
            fi
            oci iam compartment list --compartment-id-in-subtree true --all --output table --query 'data[].[id,name]'
        done
        OCI_COMPARTMENT_ID=$(oci iam compartment list --name $OCI_COMPARTMENT_NAME | jq -r '.data[].id')


        while true; do
            unset OCI_CLUSTER_NAME
            read_config OCI_CLUSTER_NAME "Cluster Name [type ? to list]"
            if [ "$OCI_CLUSTER_NAME" != "?" ]; then
                break
            fi
            oci ce cluster list --compartment-id $OCI_COMPARTMENT_ID --all --output table --query 'data[].name'
        done
        OCI_CLUSTER_ID=$(oci ce cluster list --name $OCI_CLUSTER_NAME --compartment-id $OCI_COMPARTMENT_ID | jq -r '.data[0].id')
        oci ce cluster create-kubeconfig --cluster-id $OCI_CLUSTER_ID \
            --file $CLUSTER_DIR/.kube/config --region $OCI_CLI_REGION \
            --token-version 2.0.0
    ;;

    kubespray)
        [ -e $KUBECONFIG ] && mv -fv $KUBECONFIG $KUBECONFIG.bkp
        ln -fs $CLUSTER_DIR/artifacts/admin.conf $KUBECONFIG
    ;;

    *)
        if [ -n "$KUBECONFIG" ] && [ -e "$KUBECONFIG" ]; then
            if ! ask "Overwrite $KUBECONFIG? [Y/n]"; then
                exit 0
            fi
        fi
        info "Paste kubeconfig content (press [CTRL-D] to finish)":
        cat > $KUBECONFIG
esac
