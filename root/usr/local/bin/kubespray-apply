#!/bin/bash

set -eu

source /etc/profile.d/getup.sh

if [ $# -gt 0 ] && [[ "$1" =~ (-h|--help) ]] ; then
    echo "Usage: $0 [--serial=1] [ansible-playbook parameters...]"
    exit 1
fi

user=$(get_tf_config SSH_USER ssh_user centos)
kube_version=$(ansible-inventory -i $INVENTORY_FILE --list |  jq -r '._meta.hostvars[._meta.hostvars|keys[0]].kube_version')

if [ -e $CLUSTER_DIR/kubespray-patches.diff ]; then
  GIT_DIR=$KUBESPRAY_DIR/.git git reset --hard
  patch -p1 -d $KUBESPRAY_DIR < /cluster/kubespray-patches.diff
fi

playbook=$KUBESPRAY_DIR/cluster.yml
playbook_facts=$KUBESPRAY_DIR/playbooks/facts.yml

serial_opt=""
ansible_opts=""
if [ ${0##*/} == "kubespray-upgrade" ]; then
    playbook=$KUBESPRAY_DIR/upgrade-cluster.yml
    if [[ "${1:-}" =~ --serial=[0-9]+ ]]; then
        serial_opt="-e serial=${1#*=}"
        shift
    fi
    ask_execute_command kubespray-exec kube_control_plane -- /root/etcd-backup/etcd-backup.sh
elif [ ${0##*/} == "kubespray-scale" ]; then
    playbook=$KUBESPRAY_DIR/scale.yml
    kube_nodes=$(yq e '.all.children.kube_node.hosts | keys |.[]' $CLUSTER_DIR/hosts.yaml)
    new_nodes=$(printf "%s\n" $kube_nodes |
      fzf -0 --ansi --reverse --multi --disabled \
      --header='---[ Select nodes to add (ctrl+a to select all) ]---' \
      --bind 'ctrl-a:select-all')
    if [ -z "$new_nodes" ]; then
      echo "No new nodes selected."
      exit 1
    fi
    ansible_opts="--limit $(printf "%s," $new_nodes)"
    info "In order to add nodes you must first run the playbook $playbook_facts"
    ask_execute_command ansible-playbook -i $INVENTORY_FILE --become --user $user $ansible_opts $@ $playbook_facts
fi

echo Kubernetes Version: $kube_version
ask_execute_command ansible-playbook -i $INVENTORY_FILE --become --user $user $ansible_opts $@ $playbook $serial_opt
terraform-mode terraform-install

ask_execute_command ansible-playbook -i $INVENTORY_FILE --become --user $user $@ /cluster/playbook-install-backup.yml
