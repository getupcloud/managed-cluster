#!/usr/bin/env bash

set -eu

if ${INSIDE_CONTAINER:-false}; then
    source /etc/profile.d/getup.sh
else
    source $REPO_DIR/root/etc/profile.d/getup.sh
fi
source repo-git-config-setup

info Switching to $REPO_DIR
cd $REPO_DIR

if ! gh auth status; then
    gh auth login
fi

gh_owner=$(git_owner $origin)
gh_name=$(git_name $origin)

if [ -z "$gh_owner" ] || [ -z "$gh_name" ]; then
    info Invalid git url: $origin
    read_config gh_owner "Github org or username" getupcloud
    read_config gh_name "Github repository name" managed-cluster-$customer_name
fi

: ${gh_description:="Getupcloud Managed Cluster: $customer_name"}
: ${gh_team:=operations}
: ${gh_disable_issues:=true}
: ${gh_disable_wiki:=true}

if ! gh api orgs/$gh_owner/teams/$gh_team &>/dev/null; then
    gh_team=""
fi

if ! PAGER= gh api repos/$gh_owner/$gh_name &>/dev/null; then
    ask "Create repository $gh_owner/$gh_name now? [Y/n]"

    if has_remote origin; then
        git remote rename origin _origin
    fi

    # repo doesn't exists, create now
    # origin will be added by `gh`
    success=true
    if ! gh repo create $gh_owner/$gh_name \
        --private=true \
        --description="${gh_description}" \
        --disable-issues=${gh_disable_issues} \
        --disable-wiki=${gh_disable_wiki}; then
        success=false
    fi

    if ! has_remote origin; then
        if has_remote _origin; then
            git remote rename _origin origin
        fi
    fi

    if [ -n "$gh_team" ] && ask "Give \`admin\` permission to team \`$gh_team\` into this repository? [Y/n]"; then
        gh api \
          --method PUT \
          -H "Accept: application/vnd.github.v3+json" \
          /orgs/${gh_owner}/teams/${gh_team}/repos/$gh_owner/$gh_name \
          -f permission='admin'
    fi

    if ! $success; then
        exit 1
    fi
fi

# upload flux ssh deploy key
#info Checking ssh key
pub_key="identity.pub"
for dir in "${CLUSTER_DIR-:}" "$REPO_DIR"; do
    if [ -n "$dir" ] && [ -e "$dir/$pub_key" ]; then
        pub_key="$dir/$pub_key"
        break
    fi
done

local_ssh_key_fingerprint=$(ssh-keygen -l -E sha256 -f $pub_key | awk '{print $2}')
remote_ssh_key_fingerprints=(
  $(PAGER= gh api repos/$gh_owner/$gh_name/keys | jq '.[]|.key' -r | ssh-keygen -l -E sha256 -f - | awk '{print $2}')
)

found=false
if [ ${#remote_ssh_key_fingerprints[*]} -gt 0 ]; then
  for fp in ${remote_ssh_key_fingerprints[*]}; do
    if [ "$fp" == "$local_ssh_key_fingerprint" ]; then
      found=true
      break
    fi
  done
fi

if $found; then
  info "Ssh key $pub_key ($local_ssh_key_fingerprint) already registered at repo $origin"
else
  info "Uploading ssh key: $pub_key ($local_ssh_key_fingerprint)"

  if ! PAGER= gh api repos/$gh_owner/$gh_name/keys \
      -f "key=$(<$pub_key)" -f read_only=false -f title="managed-cluster${customer_name:+-$customer_name}${cluster_name:+-$cluster_name}${cluster_type:+-$cluster_type}"; then
          warn "Failed adding key"
  fi
fi
